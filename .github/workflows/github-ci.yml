name: Image Recognition Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_maven:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
      - name: Build with Maven
        run: mvn clean install
  test_docker_compose:
    needs: [build_maven]
    runs-on: ubuntu-latest
    env:
      DB_NAME: ${{ secrets.CONTAINER_DB_NAME }}
      DB_USER: ${{ secrets.CONTAINER_DB_USER }}
      DB_PASSWORD: ${{ secrets.CONTAINER_DB_PASSWORD }}
      DB_ROOT_PASSWORD: ${{ secrets.CONTAINER_DB_ROOT_PASSWORD }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Install docker compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y
      - run: |
          docker compose up -d
      - name: Check if db container is running
        run: |
          if [ $(docker ps -qf name="labelDb") ]
          then
            echo "Database container is running"
          else
            echo "Database container is not running"
            exit 1
          fi
      - name: Check if app container is running
        run: |
          if [ $(docker ps -qf name="app") ]
          then
            echo "App container is running"
          else
            echo "App container is not running"
            exit 1
          fi
      - name: Stop containers
        if: always()
        run: docker-compose down
  build_docker_image:
    needs: [test_docker_compose]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: build and push docker image
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
          docker build --build-arg AWS_REGION=${{ secrets.AWS_REGION }} \
            -t ${{ secrets.DOCKER_USER }}/${{ secrets.APP_NAME }} .
          docker push ${{ secrets.DOCKER_USER }}/${{ secrets.APP_NAME }}
  deploy:
    needs: [build_docker_image]
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@v1.2.0
        env:
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          APP_NAME: ${{ secrets.APP_NAME }}
          CLOUD_PORT: ${{ secrets.CLOUD_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_URL: ${{ secrets.DB_URL }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        with:
          host: ${{ secrets.CLOUD_HOST }}
          username: ${{ secrets.CLOUD_USER }}
          key: ${{ secrets.CLOUD_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker stop ${{ secrets.CONTAINER_NAME }}
            docker pull ${{ secrets.DOCKER_USER }}/${{ secrets.APP_NAME }}
            docker run -dp ${{ secrets.CLOUD_PORT }}:8080 --name ${{ secrets.CONTAINER_NAME }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e SPRING_DATASOURCE_URL=${{ secrets.DB_URL }} \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} \
              ${{ secrets.DOCKER_USER }}/${{ secrets.APP_NAME }}


